#################################
# Domain, Resolution & Numerics
#
stop_time = 0.5e-12            # [s]

# proper resolution for 200 n_c incl. acc. length
# (>=40x A100)
amr.n_cell = 19456 37888

# simulation box, no MR
#   note: increase z (space & cells) for converging ion energy
amr.max_level = 0
geometry.dims = 2
geometry.prob_lo = -7.5e-6 -5.e-6
geometry.prob_hi =  7.5e-6 25.e-6

# Boundary condition
boundary.field_lo = absorbing_silver_mueller absorbing_silver_mueller
boundary.field_hi = absorbing_silver_mueller absorbing_silver_mueller

# Order of particle shape factors
algo.particle_shape = 3

# numerical tuning
warpx.cfl = 0.999

#################################
# Performance Tuning

# detail tuning instead of warpx.numprocs:
#   It is important to have enough cells in a block & grid, otherwise
#   performance will suffer.
#   Use larger values for GPUs, try to fill a GPU well with memory and place
#   few large grids on each device (you can go as low as 1 large grid / device
#   if you do not need load balancing).
#   Slicing in the 2nd dimension is preferred for ideal performance
amr.blocking_factor = 1024
amr.max_grid_size = 1024

# load balancing
#   The grid & block parameters above are needed for load balancing:
#   an average of ~10 grids per MPI rank (and device) are a good granularity
#   to allow efficient load-balancing as the simulation evolves
algo.load_balance_intervals = 100
algo.load_balance_costs_update = Heuristic

# particle bin-sorting on GPU (ideal defaults not investigated in 2D)
#   Try larger values than the defaults below and report back! :)
#warpx.sort_intervals = 4    # default on CPU: -1 (off); on GPU: 4
#warpx.sort_bin_size = 1 1 1


#################################
# Target Profile
#

#   definitions for target extent and pre-plasma
my_constants.L    = 0.05e-6            # [m] scale length (>0)
my_constants.Lcut = 0.5e-6             # [m] hard cutoff from surface
my_constants.r0 = 1e-6                 # [m] half-thickness of the density plateau
particles.species_names = electrons deuterium

# particle species
deuterium.species_type = deuterium
deuterium.injection_style = NUniformPerCell
deuterium.num_particles_per_cell_each_dim = 4 8
deuterium.momentum_distribution_type = at_rest
deuterium.profile = parse_density_function
deuterium.addRealAttributes = orig_x orig_z
deuterium.attribute.orig_x(x,y,z,ux,uy,uz,t) = "x"
deuterium.attribute.orig_z(x,y,z,ux,uy,uz,t) = "z"

electrons.species_type = electron
electrons.injection_style = NUniformPerCell
electrons.num_particles_per_cell_each_dim = 4 8
electrons.momentum_distribution_type = "gaussian"
electrons.ux_th = .01
electrons.uz_th = .01
electrons.profile = parse_density_function

# number density: "fully ionized" electron density as reference
my_constants.nc    = 1.742e27  # [m^-3]  1.11485e21 * 1.e6 / 0.8**2
my_constants.n0    = 200.0      # [n_c] plastic-like density

# density profiles (target extent, pre-plasma and cutoffs defined above particle species list)

# [target] flat foil (thickness = 2*r0)
electrons.density_function(x,y,z) = "nc*n0*(
    if(abs(z)<=r0, 1.0, if(abs(z)<r0+Lcut, exp((-abs(z)+r0)/L), 0.0)) )"
deuterium.density_function(x,y,z) = "nc*n0*(
    if(abs(z)<=r0, 1.0, if(abs(z)<r0+Lcut, exp((-abs(z)+r0)/L), 0.0)) )"

#################################
# Laser Pulse Profile
#
my_constants.laser_spot = 4e-6
lasers.names        = laser1
laser1.position     = 0. 0. -4.0e-6     # point the laser plane (antenna)
laser1.direction    = 0. 0. 1.          # the plane's (antenna's) normal direction
laser1.polarization = 1. 0. 0.          # the main polarization vector
laser1.a0           = 16.0              # maximum amplitude of the laser field [V/m]
laser1.wavelength   = 0.8e-6            # central wavelength of the laser pulse [m]
laser1.profile      = Gaussian
laser1.profile_waist = laser_spot       # beam waist (E(w_0)=E_0/e) [m]
laser1.profile_duration = 30.e-15       # pulse length (E(tau)=E_0/e; tau=tau_E=FWHM_I/1.17741) [s]
laser1.profile_t_peak = 50.e-15         # time until peak intensity reached at the laser plane [s]
laser1.profile_focal_distance = 4.0e-6  # focal distance from the antenna [m]

#################################
# Diagnostics
#
diagnostics.diags_names = diag1

diag1.intervals = 1000
diag1.diag_type = Full
diag1.fields_to_plot = Ex Ey Ez Bx By Bz jx jy jz rho rho_electrons rho_deuterium
diag1.format = openpmd


#################################
# Reduced Diagnostics
#

# histograms with 2.0 degree acceptance angle in fw direction
# 15 deg * pi / 180 : 0.03490658503 rad
# half-angle +/-   : 0.017453292515 rad
warpx.reduced_diags_names                   = histuD histue

histuD.type                                 = ParticleHistogram
histuD.intervals                            = 100
histuD.species                              = deuterium
histuD.bin_number                           = 1000
histuD.bin_min                              =  0.0
histuD.bin_max                              =  0.474  # 100 MeV protons
histuD.histogram_function(t,x,y,z,ux,uy,uz) = "u2=ux*ux+uy*uy+uz*uz; sqrt(1+u2)-1"
histuD.filter_function(t,x,y,z,ux,uy,uz) = "if(abs(x)<2*laser_spot and uz>0, 1, 0)"

histue.type                                 = ParticleHistogram
histue.intervals                            = 100
histue.species                              = electrons
histue.bin_number                           = 1000
histue.bin_min                              = 0.0
histue.bin_max                              = 197  # 100 MeV electrons
histue.histogram_function(t,x,y,z,ux,uy,uz) = "u2=ux*ux+uy*uy+uz*uz; sqrt(1+u2)-1"
histue.filter_function(t,x,y,z,ux,uy,uz) = "if(abs(x)<2*laser_spot and uz>0, 1, 0)"

#################################
# Physical Background
#
# This example is modeled after a target similar to the deuterium jet here:
#   [1] https://doi.org/10.1038/s41598-017-10589-3
#   [2] https://arxiv.org/abs/1903.06428
#
authors = "Olga Shapoval, Remi Lehe, Axel Huebl"
